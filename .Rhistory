source('~/Documents/OSAR/covid19-acessoagua/codes/mapas.R')
source('~/Documents/OSAR/covid19-acessoagua/codes/mapas.R')
# carregar pacotes
pacotes = c("ggrepel","readr","readxl", "stringr",
"dplyr", "viridis", "maps", "raster",
"ggmap", "ggrepel", "sp", "maptools",
'ggplot2',  "stringi" )
lapply(pacotes, library, character.only = T)
source('codes/mapas_source.R')
# carregar pacotes
pacotes = c("ggrepel","readr","readxl", "stringr",
"dplyr", "viridis", "maps", "raster",
"ggmap", "ggrepel", "sp", "maptools",
'ggplot2',  "stringi" )
lapply(pacotes, library, character.only = T)
source('codes/mapas_source.R')
# carregar dados
snis = read.csv('data/SNIS.csv')
pop = read.csv('data/popidade_2015.txt', sep=';')
shape_pe = shapefile("data/pe_municipios/26MUE250GC_SIR.shp")
renda <- read_excel("data/tabela3279.xlsx")
# remover virgula e transformar em numerico
snis$duracao_paralisacoes = str_replace(snis$IN072...Duração.média.das.paralisações, ',','.')
snis$duracao_paralisacoes = as.numeric(snis$duracao_paralisacoes )
snis$code = snis$Código.do.Município
# selecionar casos com dados
snis = snis[!is.na(snis$duracao_paralisacoes),]
# remover ultimo digito para combinacao
shape_pe@data$code = substr(shape_pe@data$CD_GEOCMU,1,nchar(shape_pe@data$CD_GEOCMU)-1)
# criar taxa pop maior que 65 anos
pop = mutate(pop, pop_65oumais = X65.a.69.anos + X70.a.74.anos+ X75.a.79.anos+ X80.anos.ou.mais)
pop = mutate(pop, taxa_65oumais = round(( pop_65oumais /Total)*100,3) )
# selecionar codigo do municipio e remover do nome
pop$code = substr(pop$Município, 1, 6)
pop$nome = substr(pop$Município, 8, nchar(as.character(pop$Município)))
# selecionar pop de recife
pop = pop[str_starts(pop$code, '26'), ]
# padronizar nome dos municipios para renda
renda$NM_MUNICIP = stri_trans_general(renda$Local, 'Latin-ASCII')%>%
str_replace('[(]', '')%>%
str_replace('[)]', '')%>%
str_replace(' PE', '')%>%
toupper()
shape_pe$NM_MUNICIP = stri_trans_general(shape_pe$NM_MUNICIP, 'Latin-ASCII')
# criar log da renda
renda$renda_log = log(renda$`Valor do rendimento nominal médio mensal das pessoas de 10 anos ou mais de idade (Reais)`)
mapAndBar = function(shape, data, variable, namevariable, legendname, savename){
# MAPA
mapa.funcao(shape, data, variable, '', legendname, savename)
ggsave(paste0('resultados/',savename,"_MAPA.png"), width = 6, height = 6, units = "in")
# BARRA
# ordenar
namevariable = factor(namevariable, levels = unique(namevariable[order(variable)]) )
ggplot(data = data, aes(x = namevariable , y = variable))+
geom_bar(stat = 'identity', fill = "#5c4963")+
geom_text(aes(label=round(variable,2)),  size = 3.5, vjust = 0.4, hjust=-0.08)+
labs(x = "", y = legendname)+
tema_massa()+
theme(axis.text.y = element_text(size=9,face="plain"))+
coord_flip()
ggsave(paste0('resultados/',savename,"_BARRA.png"), width = 10, height = 14, units = "in")
}
mapAndBar(shape_pe, snis, snis$duracao_paralisacoes2, snis$Município, 'Duração Média das\nParalizações (horas)', 'horas_paralizacoes')
#===== Funcao p/ Mapa =====#
mapa.funcao <- function(shape, data, variable, maintitle, legendtitle, savename) {
library(stringi); library(ggplot2)
data$variavel = variable
# merge data with shapefile
if (savename == 'renda'| savename == 'rendalog'){
shp_data <- merge(shape, data, by = "NM_MUNICIP", all = T)
}  else {
shp_data <- merge(shape, data, by = "code", all = T)
}
# definir labels no mapa (3 maiores, 3 menores)
#shp_data$variavel[is.na(shp_data$variavel)] = 0
shp_data = shp_data[order(shp_data$variavel, decreasing = T),]
shp_data$bairros_detasq = 1
shp_data$bairros_detasq[1:7] = ""
#shp_data$bairros_detasq[c(length(shp_data)-3):c(length(shp_data))] = ""
shp_data$bairros_detasq = with(shp_data, paste0(shp_data$bairros_detasq, shp_data$NM_MUNICIP))
shp_data$bairros_detasq_cod = grepl(shp_data$bairros_detasq, pattern = "1")
shp_data$bairros_detasq[shp_data$bairros_detasq_cod == TRUE ] = ""
# tranformar shapefile em polygonsdataframe
data_fortity = fortify(shp_data, region = "NM_MUNICIP")
localidade = shp_data@data$NM_MUNICIP
# extrair centroides dos poligonos
centroids.df = as.data.frame(coordinates(shp_data))
names(centroids.df) = c("Longitude", "Latitude")  #more sensible column localidades
# base para plotagem
variavel = shp_data@data$variavel
nomes_centroides = shp_data$bairros_detasq
map_dataframe = data.frame(localidade, variavel, centroids.df, nomes_centroides)
plot = ggplot(data = map_dataframe, aes(map_id = localidade)) +
geom_map(aes(fill = shp_data$variavel),colour = grey(0.96),  map = data_fortity, size=0.2) +
expand_limits(x = data_fortity$long, y = data_fortity$lat) +
scale_fill_viridis(name = legendtitle, option = 'D') +
# scale_fill_gradient(name = legendtitle, low="lightgreen", high= "darkblue")+
geom_label_repel(aes(label = nomes_centroides, x = Longitude, y = Latitude), size = 2.7, color = "black") +
labs(title = maintitle, x = "Longitude", y = "Latitude")+
coord_fixed(1) +
theme_nothing(legend = T)+
theme(#legend.position="bottom",
#legend.key.size = unit(0.7, "cm"),
#legend.text = element_text(size = 14, hjust = 3, vjust = 3)
#legend.title = element_text(size = 15, face = "plain"),
#title = element_text(size = 15, face = "bold")
)
return(plot)
}
mapAndBar = function(shape, data, variable, namevariable, legendname, savename){
# MAPA
mapa.funcao(shape, data, variable, '', legendname, savename)
ggsave(paste0('resultados/',savename,"_MAPA.png"), width = 6, height = 6, units = "in")
# BARRA
# ordenar
namevariable = factor(namevariable, levels = unique(namevariable[order(variable)]) )
ggplot(data = data, aes(x = namevariable , y = variable))+
geom_bar(stat = 'identity', fill = "#5c4963")+
geom_text(aes(label=round(variable,2)),  size = 3.5, vjust = 0.4, hjust=-0.08)+
labs(x = "", y = legendname)+
tema_massa()+
theme(axis.text.y = element_text(size=9,face="plain"))+
coord_flip()
ggsave(paste0('resultados/',savename,"_BARRA.png"), width = 10, height = 14, units = "in")
}
mapAndBar(shape_pe, snis, snis$duracao_paralisacoes2, snis$Município, 'Duração Média das\nParalizações (horas)', 'horas_paralizacoes')
snis
snis$duracao_paralisacoes2
mapAndBar(shape_pe, snis, snis$duracao_paralisacoes, snis$Município, 'Duração Média das\nParalizações (horas)', 'horas_paralizacoes')
mapAndBar(shape_pe, pop, pop$taxa_65oumais, pop$nome, '% de Idosos', 'prop_idosos')
mapAndBar(shape_pe, pop, log(pop$pop_65oumais), pop$nome, 'Número de Idosos', 'log_pop_idosos')
mapAndBar(shape_pe, pop, pop$pop_65oumais, pop$nome, 'Número de Idosos', 'pop_idosos')
renda = renda[2:186,] # remover linhas sem dados
mapAndBar(shape_pe, renda, renda$`Valor do rendimento nominal médio mensal das pessoas de 10 anos ou mais de idade (Reais)`, renda$NM_MUNICIP, 'Renda Média', 'renda')
mapAndBar(shape_pe, renda, renda$renda_log, renda$NM_MUNICIP, 'Logaritmo da\nRenda Média', 'rendalog')
df = merge(shape_pe, snis, by='code')
